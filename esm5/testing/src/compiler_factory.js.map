{"version":3,"file":"compiler_factory.js","sourceRoot":"","sources":["../../../../../../packages/platform-browser-dynamic/testing/src/compiler_factory.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileReflector, DirectiveResolver, ERROR_COMPONENT_TYPE, NgModuleResolver, PipeResolver} from '@angular/compiler';\nimport {MockDirectiveResolver, MockNgModuleResolver, MockPipeResolver} from '@angular/compiler/testing';\nimport {CompilerFactory, CompilerOptions, Component, ComponentFactory, Directive, Injector, ModuleWithComponentFactories, NgModule, NgModuleFactory, Pipe, StaticProvider, Type, ɵstringify as stringify} from '@angular/core';\nimport {MetadataOverride, ɵTestingCompiler as TestingCompiler, ɵTestingCompilerFactory as TestingCompilerFactory} from '@angular/core/testing';\nimport {ɵCompilerImpl as CompilerImpl} from '@angular/platform-browser-dynamic';\n\nimport {MetadataOverrider} from './metadata_overrider';\n\nexport const COMPILER_PROVIDERS: StaticProvider[] = [\n  {provide: MockPipeResolver, deps: [CompileReflector]},\n  {provide: PipeResolver, useExisting: MockPipeResolver},\n  {provide: MockDirectiveResolver, deps: [CompileReflector]},\n  {provide: DirectiveResolver, useExisting: MockDirectiveResolver},\n  {provide: MockNgModuleResolver, deps: [CompileReflector]},\n  {provide: NgModuleResolver, useExisting: MockNgModuleResolver},\n];\n\nexport class TestingCompilerFactoryImpl implements TestingCompilerFactory {\n  constructor(private _injector: Injector, private _compilerFactory: CompilerFactory) {}\n\n  createTestingCompiler(options: CompilerOptions[]): TestingCompiler {\n    const compiler = <CompilerImpl>this._compilerFactory.createCompiler(options);\n    return new TestingCompilerImpl(\n        compiler, compiler.injector.get(MockDirectiveResolver),\n        compiler.injector.get(MockPipeResolver), compiler.injector.get(MockNgModuleResolver));\n  }\n}\n\nexport class TestingCompilerImpl implements TestingCompiler {\n  private _overrider = new MetadataOverrider();\n  constructor(\n      private _compiler: CompilerImpl, private _directiveResolver: MockDirectiveResolver,\n      private _pipeResolver: MockPipeResolver, private _moduleResolver: MockNgModuleResolver) {}\n  get injector(): Injector { return this._compiler.injector; }\n\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return this._compiler.compileModuleSync(moduleType);\n  }\n\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return this._compiler.compileModuleAsync(moduleType);\n  }\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    return this._compiler.compileModuleAndAllComponentsSync(moduleType);\n  }\n\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType);\n  }\n\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T> {\n    return this._compiler.getComponentFactory(component);\n  }\n\n  checkOverrideAllowed(type: Type<any>) {\n    if (this._compiler.hasAotSummary(type)) {\n      throw new Error(`${stringify(type)} was AOT compiled, so its metadata cannot be changed.`);\n    }\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this.checkOverrideAllowed(ngModule);\n    const oldMetadata = this._moduleResolver.resolve(ngModule, false);\n    this._moduleResolver.setNgModule(\n        ngModule, this._overrider.overrideMetadata(NgModule, oldMetadata, override));\n    this.clearCacheFor(ngModule);\n  }\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this.checkOverrideAllowed(directive);\n    const oldMetadata = this._directiveResolver.resolve(directive, false);\n    this._directiveResolver.setDirective(\n        directive, this._overrider.overrideMetadata(Directive, oldMetadata !, override));\n    this.clearCacheFor(directive);\n  }\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this.checkOverrideAllowed(component);\n    const oldMetadata = this._directiveResolver.resolve(component, false);\n    this._directiveResolver.setDirective(\n        component, this._overrider.overrideMetadata(Component, oldMetadata !, override));\n    this.clearCacheFor(component);\n  }\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this.checkOverrideAllowed(pipe);\n    const oldMetadata = this._pipeResolver.resolve(pipe, false);\n    this._pipeResolver.setPipe(pipe, this._overrider.overrideMetadata(Pipe, oldMetadata, override));\n    this.clearCacheFor(pipe);\n  }\n  loadAotSummaries(summaries: () => any[]) { this._compiler.loadAotSummaries(summaries); }\n  clearCache(): void { this._compiler.clearCache(); }\n  clearCacheFor(type: Type<any>) { this._compiler.clearCacheFor(type); }\n\n  getComponentFromError(error: Error) { return (error as any)[ERROR_COMPONENT_TYPE] || null; }\n\n  getModuleId(moduleType: Type<any>): string|undefined {\n    return this._moduleResolver.resolve(moduleType, true).id;\n  }\n}\n"]}